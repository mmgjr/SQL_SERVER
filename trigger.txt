/*
TRIGGERS
BEFORE - AFTER
INSERT, DELETE OU UPDATE

*/

CREATE TABLE PRODUTOS(
	IDPRODUTO INT IDENTITY PRIMARY KEY,
	NOME VARCHAR(50) NOT NULL,
	CATEGORIA VARCHAR(30) NOT NULL,
	PRECO NUMERIC(10,2) NOT NULL
)
GO

CREATE TABLE HISTORICO(
	IDOPERACAO INT PRIMARY KEY IDENTITY,
	PRODUTO VARCHAR(50) NOT NULL,
	CATEGORIA VARCHAR(30) NOT NULL,
	PRECOANTIGO NUMERIC(10,2) NOT NULL,
	PRECONOVO NUMERIC(10,2) NOT NULL,
	DATA DATETIME,
	USUARIO VARCHAR(30),
	MENSAGEM VARCHAR(100)
)
GO

INSERT INTO PRODUTOS VALUES('LIVRO SQL SERVER','LIVRO',98.00)
INSERT INTO PRODUTOS VALUES('LIVRO ORACLE','LIVRO',50.00)
INSERT INTO PRODUTOS VALUES('LICENÇA POWERCENTER','SOFTWARES',45000.00)
INSERT INTO PRODUTOS VALUES('NOTEBOOK I7','COMPUTADORES',3150.00)
INSERT INTO PRODUTOS VALUES('LIVRO BUSINESS INTELLIGENCE','LIVRO',90.00)
GO

SELECT * FROM PRODUTOS
SELECT * FROM HISTORICO
GO

/* VERIFICANDO O USUÁRIO DO BANCO*/
SELECT SUSER_NAME()
GO

/* TRIGGER DE DADOS - DATA MANIPULATION LANGUAGE*/

CREATE TRIGGER TRG_ATUALIZA_PRECO
ON DBO.PRODUTOS
FOR UPDATE
AS
/*DECLARANDO VARIÁVEIS*/
	DECLARE @IDPRODUTO INT
	DECLARE @PRODUTO VARCHAR(30)
	DECLARE @CATEGORIA VARCHAR(10)
	DECLARE @PRECO NUMERIC(10,2)
	DECLARE @PRECONOVO NUMERIC(10,2)
	DECLARE @DATA DATETIME
	DECLARE @USUARIO VARCHAR(30)
	DECLARE @ACAO VARCHAR(100)

/*PEGANDO OS DADOS DA TABELA PRECO QUE FORAM ALTERADOS */
	SELECT @IDPRODUTO = IDPRODUTO FROM inserted
	SELECT @PRODUTO = NOME FROM inserted
	SELECT @CATEGORIA = CATEGORIA FROM inserted
	SELECT @PRECO = PRECO FROM deleted
	SELECT @PRECONOVO = PRECO FROM inserted
/*VALORES QUE SERÃO INSERIDOS NO HISTÓRICO FUNÇÕES SET*/
	SET @DATA = GETDATE()
	SET @USUARIO = SUSER_NAME()
	SET @ACAO = 'VALOR INSERIDO PELA TRIGGER TRG_ATUALIZA_PRECO'

	INSERT INTO HISTORICO(
	PRODUTO,CATEGORIA,PRECOANTIGO,
	PRECONOVO,DATA,USUARIO,MENSAGEM) 
	VALUES(
	@PRODUTO,@CATEGORIA,@PRECO,
	@PRECONOVO,@DATA,@USUARIO,@ACAO)

	PRINT 'TRIGGER EXECUTADO COM SUCESSO'
GO

/* EXECUTANDO UM UPDATE*/

UPDATE PRODUTOS SET PRECO = 200.00 WHERE IDPRODUTO = 1
GO

UPDATE PRODUTOS SET NOME = 'LIVRO DE PYTHON' WHERE IDPRODUTO = 1
GO

SELECT * FROM PRODUTOS
SELECT * FROM HISTORICO
GO

DROP TRIGGER TRG_ATUALIZA_PRECO
GO

/*
PROGRAMANDO TRIGGER EM UMA COLUNA
ESSE IF É A LINGUAGEM TSQL(TRANSACTIONAL SQL LINGUAGE)
LINGUAGEM DO SQLServer
QUANDO ABRE A CONDIÇÃO DEVE INICIAR E FECHAR (BEGIN-END)
*/
CREATE TRIGGER TRG_ATUALIZA_PRECO
ON DBO.PRODUTOS
FOR UPDATE AS
IF UPDATE(PRECO)
BEGIN
/*DECLARANDO VARIÁVEIS*/
	DECLARE @IDPRODUTO INT
	DECLARE @PRODUTO VARCHAR(30)
	DECLARE @CATEGORIA VARCHAR(10)
	DECLARE @PRECO NUMERIC(10,2)
	DECLARE @PRECONOVO NUMERIC(10,2)
	DECLARE @DATA DATETIME
	DECLARE @USUARIO VARCHAR(30)
	DECLARE @ACAO VARCHAR(100)

/*PEGANDO OS DADOS DA TABELA PRECO QUE FORAM ALTERADOS */
	SELECT @IDPRODUTO = IDPRODUTO FROM inserted
	SELECT @PRODUTO = NOME FROM inserted
	SELECT @CATEGORIA = CATEGORIA FROM inserted
	SELECT @PRECO = PRECO FROM deleted
	SELECT @PRECONOVO = PRECO FROM inserted
/*VALORES QUE SERÃO INSERIDOS NO HISTÓRICO FUNÇÕES SET*/
	SET @DATA = GETDATE()
	SET @USUARIO = SUSER_NAME()
	SET @ACAO = 'VALOR INSERIDO PELA TRIGGER TRG_ATUALIZA_PRECO'

	INSERT INTO HISTORICO(
	PRODUTO,CATEGORIA,PRECOANTIGO,
	PRECONOVO,DATA,USUARIO,MENSAGEM) 
	VALUES(
	@PRODUTO,@CATEGORIA,@PRECO,
	@PRECONOVO,@DATA,@USUARIO,@ACAO)

	PRINT 'TRIGGER EXECUTADO COM SUCESSO'
END
GO

/*ATRIBUINDO SELECTS A VARIAVEIS - ANONIMO*/


DECLARE 
	@RESULTADO INT 
	SET @RESULTADO = (SELECT 50 + 100)
	INSERT INTO RESULTADO VALUES(@RESULTADO)
	PRINT 'VALOR INSERIDO NA TABELA: '+CAST(@RESULTADO AS VARCHAR)
	GO

CREATE TABLE RESULTADO(
	IDRESULTADO INT PRIMARY KEY IDENTITY,
	RESULTADO INT
)
GO

SELECT * FROM RESULTADO
GO


/* TRIGGER SIMPLIFICADA */
CREATE TABLE EMPREGADO(
	IDEMP INT PRIMARY KEY,
	NOME VARCHAR(30),
	SALARIO MONEY,
	IDGERENTE INT
)
GO

ALTER TABLE EMPREGADO ADD CONSTRAINT FK_GERENTE
FOREIGN KEY(IDGERENTE) REFERENCES EMPREGADO(IDEMP)

INSERT INTO EMPREGADO VALUES(1,'CLARA',5000.00,NULL)
INSERT INTO EMPREGADO VALUES(2,'CÉLIA',4000.00,1)
INSERT INTO EMPREGADO VALUES(3,'JOÃO',4000.00,1)
GO

CREATE TABLE HIST_SALARIO(
	IDEMPREGADO INT,
	ANTIGOSAL MONEY,
	NOVOSAL MONEY,
	DATA DATETIME
)
GO

CREATE TRIGGER TG_SALARIO
ON DBO.EMPREGADO
FOR UPDATE AS
IF UPDATE(SALARIO)
BEGIN
	INSERT INTO HIST_SALARIO(
		IDEMPREGADO,ANTIGOSAL,NOVOSAL,DATA
	)
	SELECT D.IDEMP,D.SALARIO,I.SALARIO,GETDATE()
	FROM deleted D, inserted I

	PRINT 'ATUALIZADO A TABELA EMPREGADO E SALVO NO HISTÓRICO'
END
GO 

UPDATE EMPREGADO SET SALARIO = 1200.00 WHERE IDEMP = 3
GO

UPDATE EMPREGADO SET SALARIO = SALARIO * 1.1
GO

SELECT * FROM HIST_SALARIO
GO
SELECT * FROM EMPREGADO
GO

CREATE TABLE SALARIO_RANGE(
	MINSAL MONEY,
	MAXSAL MONEY
)
GO

INSERT INTO SALARIO_RANGE VALUES(1000.00,6000.00)
GO

CREATE TRIGGER TG_RANGE
ON DBO.EMPREGADO
FOR INSERT,UPDATE
AS
	DECLARE
		@MINSAL MONEY,
		@MAXSAL MONEY,
		@ATUALSAL MONEY
		
	SELECT @MINSAL = MINSAL, @MAXSAL = MAXSAL FROM SALARIO_RANGE

	SELECT @ATUALSAL = I.SALARIO 
	FROM inserted I

	IF(@ATUALSAL < @MINSAL)
	BEGIN
		RAISERROR('SALARIO MENOR QUE O PISO',16,1)
		ROLLBACK TRANSACTION
	END

	IF(@ATUALSAL > @MAXSAL)
	BEGIN
		RAISERROR('SALARIO MAIOR QUE O TETO',16,1)
		ROLLBACK TRANSACTION
	END
GO

UPDATE EMPREGADO SET SALARIO = 9000.00 WHERE IDEMP = 1
GO

UPDATE EMPREGADO SET SALARIO = 900.00 WHERE IDEMP = 3
GO

/*VERIFICANDO O TEXTO DE UMA TRIGGER*/

SP_HELPTEXT TG_RANGE
GO 