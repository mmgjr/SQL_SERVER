/*
ORGANIZAR FISICAMENTE E LOGICAMENT UM BANCO DE DADOS

1-CRIAR O BANCO COM ARQUIVO PARA OS SETORES DE MKT e RH
2-CRIAR UM ARQUIVO GERAL
3-DEIXAR O MDF APENAS COM O DICIONARIO DE DADOS
4-CRIAR 2 GRUPOS DE ARQUIVOS (PRIMARY-GRUPO PADRÃO-MDF)

*/

CREATE DATABASE EMPRESA 
GO
USE EMPRESA
GO
/*
IDENTITY É IGUAL AO AUTOINCREMENT DO MySQL
*/
CREATE TABLE ALUNO(
IDALUNO INT PRIMARY KEY IDENTITY(1,1),
NOME VARCHAR(50) NOT NULL,
SEXO CHAR(1) NOT NULL,
NASCIMENTO DATE NOT NULL,
EMAIL VARCHAR(30) UNIQUE
)
GO

/*CONSTRAINTS FORA DA TABELA PADRÃO CORRETO*/
ALTER TABLE ALUNO ADD CONSTRAINT CK_SEXO CHECK (SEXO IN('M','F'))
GO


/*RELACIONAMENTO 1 X 1*/
CREATE TABLE ENDERECO(
IDENDERECO INT PRIMARY KEY IDENTITY(100,10),
BAIRRO VARCHAR(30),
UF CHAR(2) NOT NULL,
CHECK(UF IN('RJ','SP','MG')),
ID_ALUNO INT UNIQUE
)
GO

/*CRIANDO A FK*/
ALTER TABLE ENDERECO ADD CONSTRAINT FK_ENDERECO_ALUNO 
FOREIGN KEY(ID_ALUNO) REFERENCES ALUNO(IDALUNO)
GO

/*
COMANDOS DE DESCRICAO- FUNCIONA COM PROCEDURES
PROCEDURES JÁ CRIADAS E ARMAZENADAS NO SISTEMA.
TODO COMENDO COMEÇA COM 'SP_'
*/
SP_COLUMNS ALUNO
GO
SP_HELP ALUNO
GO

/*INSERINDO DADOS*/
INSERT INTO ALUNO VALUES('ANDRE','M','1990-12-30','ANDRE@HOTMAIL.COM')
INSERT INTO ALUNO VALUES('ANA','F','1985-05-19','ANA@HOTMAIL.COM')
INSERT INTO ALUNO VALUES('RUI','M','1987-03-10','RUI@HOTMAIL.COM')
INSERT INTO ALUNO VALUES('JOAO','M','1985-11-14','JOAO@HOTMAIL.COM')
GO

SELECT * FROM ALUNO
GO

/*ENDERECO*/
INSERT INTO ENDERECO VALUES('FLAMENGO','RJ',1)
INSERT INTO ENDERECO VALUES('MORUMBI','SP',2)
INSERT INTO ENDERECO VALUES('CENTRO','MG',4)
INSERT INTO ENDERECO VALUES('CENTRO','SP',3);
GO

/*CRIANDO A TABELA TELEFONE 1 X N*/
CREATE TABLE TELEFONE(
IDTELEFONE INT PRIMARY KEY IDENTITY,
TIPO CHAR(3) NOT NULL,
NUMERO VARCHAR(10) NOT NULL,
ID_ALUNO INT,
CHECK (TIPO IN('RES','COM','CEL'))
)
GO

INSERT INTO TELEFONE VALUES('CEL','7894561',1)
INSERT INTO TELEFONE VALUES('RES','12345678',1)
INSERT INTO TELEFONE VALUES('COM','12398745',2)
INSERT INTO TELEFONE VALUES('CEL','96325874',2)
GO

SELECT * FROM ALUNO
GO

/*PEGAR DATA ATUAL*/
SELECT GETDATE()
GO

/*CLAUSULA AMBIGUA*/
SELECT A.NOME,T.TIPO,T.NUMERO,E.BAIRRO,E.UF 
FROM ALUNO A INNER JOIN TELEFONE T
ON A.IDALUNO = T.ID_ALUNO
INNER JOIN ENDERECO E
ON A.IDALUNO = E.ID_ALUNO
GO

/*TODOS OS ALUNO ATÉ OS QUE NÃO TEM TELEFONE LEFT JOIN*/
SELECT A.NOME,T.TIPO,T.NUMERO,E.BAIRRO,E.UF 
FROM ALUNO A LEFT JOIN TELEFONE T
ON A.IDALUNO = T.ID_ALUNO
INNER JOIN ENDERECO E
ON A.IDALUNO = E.ID_ALUNO
GO

/*IFNULL*/
SELECT 
	A.NOME,
	ISNULL(T.TIPO,'SEM') AS "TIPO",
	ISNULL(T.NUMERO,'SEM') AS "NÚMERO",
	E.BAIRRO,
	E.UF 
FROM ALUNO A LEFT JOIN TELEFONE T
ON A.IDALUNO = T.ID_ALUNO
INNER JOIN ENDERECO E
ON A.IDALUNO = E.ID_ALUNO
GO

/*DATAS*/

SELECT NOME,NASCIMENTO FROM ALUNO
GO

/*DATEDIFF - CALCULA A DIFERENÇA ENTRE DUAS DATAS 
FUNÇÃO GETDATE() TRAZ DIA E HORA
*/

SELECT NOME,GETDATE() AS DIA_HORA FROM ALUNO
GO

SELECT NOME,DATEDIFF(DAY,NASCIMENTO,GETDATE()) FROM ALUNO
GO

SELECT NOME,DATEDIFF(DAY,NASCIMENTO,GETDATE()) AS "IDADE" FROM ALUNO
GO

SELECT NOME,(DATEDIFF(DAY,NASCIMENTO,GETDATE())/365) AS "IDADE" FROM ALUNO
GO

SELECT NOME,(DATEDIFF(MONTH,NASCIMENTO,GETDATE())/12) AS "IDADE" FROM ALUNO
GO

SELECT NOME,(DATEDIFF(YEAR,NASCIMENTO,GETDATE())) AS "IDADE" FROM ALUNO
GO

/*DATENAME - TRAZ O NOME DA PARTE DA DATA EM QUESTÃO*/
SELECT NOME, DATENAME(MONTH,NASCIMENTO) AS "MÊS" FROM ALUNO
GO

SELECT NOME, DATENAME(YEAR,NASCIMENTO) AS "ANO" FROM ALUNO
GO

SELECT NOME, DATENAME(WEEKDAY,NASCIMENTO) AS "DIA_SEMANA" FROM ALUNO
GO

/*DATEPART - MESMA COISA QUE O DATENAME,MAS RETORNA UM INTEIRO*/
SELECT NOME, DATEPART(MONTH,NASCIMENTO) FROM ALUNO
GO

/*DATEADD RETORNA UMA DATA SOMANDO OUTRA DATA*/

SELECT DATEADD(DAY,365,GETDATE())

SELECT DATEADD(YEAR,10,GETDATE())


/*
CONVERSAO DE DADOS

OPERADOR DE SOMA PODE SOMAR OU CONCATENAR STRINGS
*/

SELECT 1 + '1'
GO

SELECT '1' + '1'
GO

/*FUNCÕES DE CONVERSÃO DE DADOS*/

SELECT CAST('1' AS INT) + CAST('1' AS INT)
GO

/*
CONVERSÃO E CONCATENAÇÃO

*/
SELECT NOME,
NASCIMENTO
FROM ALUNO
GO

SELECT NOME,
DAY(NASCIMENTO) + '/' + MONTH(NASCIMENTO) + '/' + YEAR(NASCIMENTO) 
FROM ALUNO
GO

SELECT NOME,
CAST(DAY(NASCIMENTO) AS VARCHAR) + '/' + 
CAST(MONTH(NASCIMENTO) AS VARCHAR) + '/' + 
CAST(YEAR(NASCIMENTO) AS VARCHAR) AS "NASCIMENTO" 
FROM ALUNO
GO


/*
CHARINDEX - RETORNA UM INTEIRO
CONTAGEM DEFAULT - INICIA EM 01
*/

SELECT NOME,CHARINDEX('A',NOME) AS INDICE
FROM ALUNO
GO
/*COMEÇANDO DO INDICE 2*/
SELECT NOME,CHARINDEX('A',NOME,2) AS INDICE
FROM ALUNO
GO

/*BULK INSERT - IMPORTAÇÃO DE ARQUIVOS*/

CREATE TABLE LANCAMENTO_CONTABIL(
CONTA INT,
VALOR INT,
DEB_CRED CHAR(1)
)
GO

SELECT * FROM LANCAMENTO_CONTABIL
GO

/*
COMEÇANDO NA SEGUNDA LINHA;
DEFININDO O TIPO DE DADO;
DELIMITADOR ENTRE OS DADOS,NESSE CASO É O TAB(\t).
ENCERRANDO AS LINHAS COM ENTER(\n)
*/
BULK INSERT LANCAMENTO_CONTABIL
FROM 'C:\Junior\E-book\SQL_Server\SQL_Server_Udemy\CONTAS.txt'
WITH(
FIRSTROW = 2,
DATAFILETYPE = 'char',
FIELDTERMINATOR = '\t',
ROWTERMINATOR = '\n'
)

SELECT * FROM LANCAMENTO_CONTABIL
GO

/*DELETANDO OS REGISTROS DA TABELA*/
DELETE FROM LANCAMENTO_CONTABIL

SELECT CONTA,VALOR,
CHARINDEX('D',DEB_CRED) AS DEBITO,
CHARINDEX('C',DEB_CRED) AS CREDITO,
CHARINDEX('C',DEB_CRED) * 2 - 1 AS MULTIPLICADOR
FROM LANCAMENTO_CONTABIL
GO

SELECT CONTA,
SUM(VALOR * (CHARINDEX('C',DEB_CRED) * 2 - 1 )) AS SALDO
FROM LANCAMENTO_CONTABIL
GROUP BY CONTA
ORDER BY CONTA
GO


